#!/bin/bash

net_proc=/proc/sys/net
ipv4_proc=$net_proc/ipv4
lvs_proc=$ipv4_proc/vs
nat_proc=$ipv4_proc/bignat
ipv4_conf_proc=$ipv4_proc/conf

sysctl_conf=/etc/sysctl.conf
modprobe_conf=/etc/modprobe.conf
set_irq_tool=/home/lvs/set_irq_affinity.sh

kernel_ver=""
kernel=$(uname -r | awk -F "-" '{print $1}')
lvs_mode=
l3_through=0
syn_proxy=0

function usage()
{
	echo "=========================================="
	echo "./lvs_init [option]"
	echo -e "-k/--kernel-ver:\tsystem kernel version"
	echo -e "-m/--lvs-mode:\t\tlvs mode, lvs_dr/LVS_DR, lvs_nat/LVS_NAT, nat/NAT"
	echo -e "-l/--l3-through:\tl3 through swtich, 0, 1, only work in lvs_nat/LVS_NAT mode"
	echo -e "-s/--syn-proxy:\t\tsyn proxy switch, 0, 1, only work in lvs_nat/LVS_NAT mode"
	echo -e "-h/--help:\t\tlvs_init usage"
}


function update_conf()
{
	file=$1
	src=$2
	dst=$3
	[ "$(grep "$src" $file)" != "" ] && sed -i "s/$src/$dst/g" $file || echo "$dst" >> $file
}

# load ip_vs modules
function modprobe_lvs()
{
	/sbin/lsmod | grep "ip_vs" > /dev/null
	if [ $? -eq 0 ]
	then
		return 0
	else
		/sbin/modprobe ip_vs
		if [ $? -ne 0 ]
		then
			echo "error: lvs init failed"
			exit 1
		fi
	fi	
} 

# init nic dev
function nic_dev_init()
{
	nic_devs=$(ls $ipv4_conf_proc 2>/dev/null)
	for dev in $nic_devs
	do
		dev_proc=$ipv4_conf_proc/$dev
		echo 0 > $dev_proc/rp_filter
		echo 1 > $dev_proc/arp_ignore
		echo 2 > $dev_proc/arp_announce 
	done
	
	nic_devs=$(ip addr | grep "^[0-9]*:" | awk -F ": " '{print $2}' | sed 's/@.*//g')
	for dev in $nic_devs
	do
		[[ $dev =~ "^sit" ]] && continue
		ethtool -K $dev gro off
		ethtool -K $dev tso off
		ethtool -K $dev gso off
		ethtool -K $dev lro off
	done
}


function do_irq()
{
	/etc/init.d/irqbalance stop
	[ "$kernel" != "2.6.32" ] && return 
	nic_list=$(ip addr | grep "^[0-9]*:" | awk -F ": " '{print $2}' | sed 's/@.*//g' | grep "eth*" | tr '\n' ' ')
	[ ! -x $set_irq_tool ] && echo "Warning: can not find $set_irq_tool, set irqbalance failed!" && return
	$set_irq_tool $nic_list
}

# network init 
function sys_net_init()
{
# net config
# set unix domain socket qlen
	echo 10000 > /proc/sys/net/unix/max_dgram_qlen
	echo 1 > /proc/sys/net/ipv4/ip_forward
	echo "1025 1125" > /proc/sys/net/ipv4/ip_local_port_range
	/etc/init.d/iptables stop
	/etc/init.d/ip6tables stop
	chkconfig iptables off
	chkconfig ip6tables off
	do_irq
}

function lvs_init_comm()
{
    echo 5000 > $lvs_proc/tcp_timeout_time_wait
    echo "0" > /proc/sys/net/ipv4/icmp_ratelimit
}

function nat_nat_init()
{
    modprobe_lvs
    echo 3000 > $nat_proc/tcp_timeout_time_wait
    echo 0 > $nat_proc/big_nat_acl_level
    echo 30000 > $nat_proc/udp_timeout_normal
    echo 3000 > $nat_proc/tcp_timeout_time_wait
    echo 10000 > $nat_proc/tcp_timeout_syn_recv
    echo 1 > $nat_proc/big_nat_tcp_timestamp_disable
}

# lvs config: nat
function lvs_nat_init()
{
	modprobe_lvs
	lvs_init_comm
	echo $syn_proxy > $lvs_proc/syn_proxy_entry
	echo 1 > $lvs_proc/syn_proxy_conn_reuse
	echo 1 > $lvs_proc/syn_proxy_ttm_entry

	echo 2000 > $lvs_proc/tcp_timeout_synack
	echo 2000 > $lvs_proc/tcp_timeout_syn_sent
	echo 86400000 > $lvs_proc/tcp_timeout_established
#	echo 30000 > $lvs_proc/tcp_timeout_time_wait
	echo 60000 > $lvs_proc/tcp_timeout_fin_wait
	echo 3000 > $lvs_proc/tcp_timeout_close_wait
	echo 3000 > $lvs_proc/tcp_timeout_last_ack
	echo 10000 > $lvs_proc/tcp_timeout_close
	echo 1130 > $lvs_proc/ip_vs_L3_bport_min
	echo 65535 > $lvs_proc/ip_vs_L3_bport_max
	echo 9 > $lvs_proc/syn_proxy_wscale
}

# lvs config: dr
function lvs_dr_init()
{
	modprobe_lvs
	lvs_init_comm
	echo 0 > $lvs_proc/syn_proxy_conn_reuse
	echo 0 > $lvs_proc/syn_proxy_entry
}

function lvs_nat_nat_init()
{
	#lvs_init_comm
	nat_nat_init
	return 
}

function lvs_dr()
{
	nic_dev_init
	sys_net_init
	update_conf $sysctl_conf "net.ipv4.conf.default.rp_filter.*" "net.ipv4.conf.default.rp_filter = 0"
	update_conf $modprobe_conf "options ip_vs ip_vs_L3_through.*" ""
	lvs_dr_init
}

function lvs_nat()
{
	nic_dev_init
	sys_net_init
	update_conf $sysctl_conf "net.ipv4.conf.default.rp_filter.*" "net.ipv4.conf.default.rp_filter = 0"
	update_conf $modprobe_conf "options ip_vs ip_vs_L3_through.*" "options ip_vs ip_vs_L3_through=$l3_through"
	lvs_nat_init
}

function lvs_nat_nat()
{
	nic_dev_init
	sys_net_init
	update_conf $sysctl_conf "net.ipv4.conf.default.rp_filter.*" "net.ipv4.conf.default.rp_filter = 0"
	update_conf $modprobe_conf "options ip_vs ip_vs_L3_through.*" ""
	lvs_nat_nat_init
}

function lvs_cluster()
{
	lvs_nat
}

function is_bool()
{
	if [ "$1" == "0" ] || [ "$1" == "1" ]
	then
		return 1
	fi
	return 0
}

function is_num()
{
	expr $1 + 0 1>/dev/null 2>&1
	[ $? -eq 0 ] && return 1
	return 0
}

function param_check()
{
	is_bool $l3_through
	[ $? != 1 ] && { echo "Error: unexpected l3_through value $l3_through"; exit 1; }
	is_bool $syn_proxy
	[ $? != 1 ] && { echo "Error: unexpected syn_proxy value $syn_proxy"; exit 1; }
}

function parse_opt()
{
	opt_str=`getopt -o k:m:l:s:h --long kernel-ver:,lvs-mode:,l3-through:,syn-proxy:,help, -n 'example.bash' -- "$@"`

	if [ $? != 0 ] 
	then 
	echo "Terminating..." >&2
		exit 1
	fi

	eval set -- "$opt_str"

	while [ True ]
	do
		case "$1" in
			-k|--kernel-ver)
				kernel_ver=$2
				echo -e "kernel version:\t$kernel_ver"
				shift 2 ;;
			-m|--lvs-mode)
				lvs_mode=$2
				echo -e "lvs mode:\t$lvs_mode"
				shift 2 ;;
			-l|--l3-through)
				l3_through=$2
				echo -e "lvs through:\t$l3_through"
				shift 2;;
			-s|--syn-proxy):
				syn_proxy=$2
				echo -e "syn proxy:\t$syn_proxy"
				shift 2;;
			--)
				shift
				break;;
			-h|--help) 
				usage
				exit 1 ;;
		esac
	done
}

parse_opt $@
param_check

[ -z "$lvs_mode" ] && { echo "error: you need to specify lvs-mode"; usage; } && exit 1

case $lvs_mode in
	lvs_dr|LVS_DR)
		lvs_dr
		;;
	lvs_nat|LVS_NAT)
		lvs_nat
		;;
	nat|NAT)
		lvs_nat_nat
		;;
	lvs_cluster|LVS_CLUSTER)
		lvs_cluster
		;;
	*)
		echo -e "Error:\tunknown lvs mode $lvs_mode, only support lvs_dr/lvs_nat/nat"
		usage
		;;
esac
