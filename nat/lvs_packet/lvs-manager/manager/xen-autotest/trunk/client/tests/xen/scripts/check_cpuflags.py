#!/usr/bin/python
import os
import sys
import struct
import time
import subprocess
from stat import *

R_EAX = 0
R_EBX = 1
R_ECX = 2
R_EDX = 3

cpuid_dev = '/dev/cpu/0/cpuid'

def find_cpuid_dev():
    loading = False
    loaded = False
    # use try/finally with a nested try/except in python 2.4
    try:
        try:
            f = file(cpuid_dev)
            loaded = True
        except IOError, e:
            err_msg = str(e)
            loading = True
            if os.system("modprobe cpuid"):
                raise SystemError("Failed to load cpuid module")
            return True
    finally:
        # it may takes some time (even < 1s) to load the module
        i = 0
        while loading and i < 50:
            if os.path.exists(cpuid_dev):
                loading = False
                loaded = True
            time.sleep(0.1)
            i += 1
        if loaded == False:
            raise IOError(err_msg)
    return True

def cpuid(func):
    f = file(cpuid_dev)
    f.seek(func)
    return struct.unpack('IIII', f.read(16))

def get_cpu_vendor():
    eax, ebx, ecx, edx = cpuid(0x00000000)

    # Vendor ID : ebx + edx + ecx
    return ''.join(list(struct.unpack('4s', struct.pack('I', ebx))\
                      + struct.unpack('4s', struct.pack('I', edx))\
                      + struct.unpack('4s', struct.pack('I', ecx))))

def cpuid_bit_test(cpuid_leaf, reg, bit):
    eax, ebx, ecx, edx = cpuid(cpuid_leaf)
    if reg == R_EAX:
        return eax & ( 1 << int(bit)) != 0
    elif reg == R_EBX:
        return ebx & ( 1 << int(bit)) != 0
    elif reg == R_ECX:
        return ecx & ( 1 << int(bit)) != 0
    elif reg == R_EDX:
        return edx & ( 1 << int(bit)) != 0
    else:
        raise ValueError("Register '%s' is not one of\
            'EAX(0), EBX(1), ECX(2), EDX(3)'" % str(reg))

detect =  '\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x03\x00\x01\x00\x00\x00@\x83\x04\x084\x00\x00\x00\x84\x08\x00\x00\x00\x00\x00\x004\x00 \x00\x07\x00(\x00\x1c\x00\x19\x00\x06\x00\x00\x004\x00\x00\x004\x80\x04\x084\x80\x04\x08\xe0\x00\x00\x00\xe0\x00\x00\x00\x05\x00\x00\x00\x04\x00\x00\x00\x03\x00\x00\x00\x14\x01\x00\x00\x14\x81\x04\x08\x14\x81\x04\x08\x13\x00\x00\x00\x13\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x80\x04\x08\x00\x80\x04\x08\x8c\x05\x00\x00\x8c\x05\x00\x00\x05\x00\x00\x00\x00\x10\x00\x00\x01\x00\x00\x00\x8c\x05\x00\x00\x8c\x95\x04\x08\x8c\x95\x04\x08\x08\x01\x00\x00\xd0\x01\x00\x00\x06\x00\x00\x00\x00\x10\x00\x00\x02\x00\x00\x00\xa0\x05\x00\x00\xa0\x95\x04\x08\xa0\x95\x04\x08\xc8\x00\x00\x00\xc8\x00\x00\x00\x06\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00(\x01\x00\x00(\x81\x04\x08(\x81\x04\x08 \x00\x00\x00 \x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00Q\xe5td\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x04\x00\x00\x00/lib/ld-linux.so.2\x00\x00\x04\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00GNU\x00\x00\x00\x00\x00\x02\x00\x00\x00\x06\x00\x00\x00\t\x00\x00\x00\x02\x00\x00\x00\x07\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x00 \x00 \x00\x00\x00\x00\x07\x00\x00\x00\xadK\xe3\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00)\x00\x00\x00\x00\x00\x00\x00\xd7\x00\x00\x00\x12\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00E\x00\x00\x00\x00\x00\x00\x00\x9f\x01\x00\x00\x12\x00\x00\x00=\x00\x00\x00\x00\x00\x00\x000\x00\x00\x00\x12\x00\x00\x005\x00\x00\x00\x00\x00\x00\x00m\x00\x00\x00\x12\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00\x8f\x01\x00\x00\x12\x00\x00\x00\x1a\x00\x00\x00x\x85\x04\x08\x04\x00\x00\x00\x11\x00\x0e\x00\x00__gmon_start__\x00libc.so.6\x00_IO_stdin_used\x00signal\x00puts\x00longjmp\x00_setjmp\x00__libc_start_main\x00GLIBC_2.0\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x02\x00\x02\x00\x02\x00\x01\x00\x00\x00\x01\x00\x01\x00\x10\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x10ii\r\x00\x00\x02\x00W\x00\x00\x00\x00\x00\x00\x00h\x96\x04\x08\x06\x02\x00\x00x\x96\x04\x08\x07\x01\x00\x00|\x96\x04\x08\x07\x02\x00\x00\x80\x96\x04\x08\x07\x03\x00\x00\x84\x96\x04\x08\x07\x04\x00\x00\x88\x96\x04\x08\x07\x05\x00\x00\x8c\x96\x04\x08\x07\x06\x00\x00U\x89\xe5\x83\xec\x08\xe8\xa5\x00\x00\x00\xe8,\x01\x00\x00\xe8g\x02\x00\x00\xc9\xc3\x00\xff5p\x96\x04\x08\xff%t\x96\x04\x08\x00\x00\x00\x00\xff%x\x96\x04\x08h\x00\x00\x00\x00\xe9\xe0\xff\xff\xff\xff%|\x96\x04\x08h\x08\x00\x00\x00\xe9\xd0\xff\xff\xff\xff%\x80\x96\x04\x08h\x10\x00\x00\x00\xe9\xc0\xff\xff\xff\xff%\x84\x96\x04\x08h\x18\x00\x00\x00\xe9\xb0\xff\xff\xff\xff%\x88\x96\x04\x08h \x00\x00\x00\xe9\xa0\xff\xff\xff\xff%\x8c\x96\x04\x08h(\x00\x00\x00\xe9\x90\xff\xff\xff\x00\x00\x00\x001\xed^\x89\xe1\x83\xe4\xf0PTRh\xb0\x84\x04\x08h\xc0\x84\x04\x08QVh.\x84\x04\x08\xe8\x9b\xff\xff\xff\xf4\x90\x90U\x89\xe5S\x83\xec\x04\xe8\x00\x00\x00\x00[\x81\xc3\xfc\x12\x00\x00\x8b\x93\xfc\xff\xff\xff\x85\xd2t\x05\xe8f\xff\xff\xffX[\xc9\xc3\x90\x90\x90\x90\x90\x90U\x89\xe5S\x83\xec\x04\x80=\xa4\x96\x04\x08\x00u?\xb8\x98\x95\x04\x08-\x94\x95\x04\x08\xc1\xf8\x02\x8dX\xff\xa1\xa0\x96\x04\x089\xc3v\x1f\x8d\xb4&\x00\x00\x00\x00\x83\xc0\x01\xa3\xa0\x96\x04\x08\xff\x14\x85\x94\x95\x04\x08\xa1\xa0\x96\x04\x089\xc3w\xe8\xc6\x05\xa4\x96\x04\x08\x01\x83\xc4\x04[]\xc3\x8dt&\x00\x8d\xbc\'\x00\x00\x00\x00U\x89\xe5\x83\xec\x08\xa1\x9c\x95\x04\x08\x85\xc0t\x12\xb8\x00\x00\x00\x00\x85\xc0t\t\xc7\x04$\x9c\x95\x04\x08\xff\xd0\xc9\xc3\x90U\x89\xe5\x83\xec\x08\xc7D$\x04\x01\x00\x00\x00\xc7\x04$\xc0\x96\x04\x08\xe8\xee\xfe\xff\xff\x8dL$\x04\x83\xe4\xf0\xffq\xfcU\x89\xe5Q\x83\xec4\xc7D$\x04\x14\x84\x04\x08\xc7\x04$\x04\x00\x00\x00\xe8\x89\xfe\xff\xff\xc7\x04$\xc0\x96\x04\x08\xe8\xad\xfe\xff\xff\x85\xc0u\x15\xc7E\xf8\x01\x00\x00\x00\xb8\x01\x00\x00\x00\x0f\x0bxen\x0f\xa2\xeb\x07\xc7E\xf8\x00\x00\x00\x00\x83}\xf8\x00t\t\xc7E\xd8\x80\x85\x04\x08\xeb\x07\xc7E\xd8\x83\x85\x04\x08\x8bE\xd8\x89\x04$\xe8\x8c\xfe\xff\xff\xb8\x00\x00\x00\x00\x83\xc44Y]\x8da\xfc\xc3\x90\x90U\x89\xe5]\xc3\x8dt&\x00\x8d\xbc\'\x00\x00\x00\x00U\x89\xe5WVS\xe8^\x00\x00\x00\x81\xc3\xa1\x11\x00\x00\x83\xec\x1c\xe8\xdb\xfd\xff\xff\x8d\x83 \xff\xff\xff\x89E\xf0\x8d\x83 \xff\xff\xff)E\xf0\xc1}\xf0\x02\x8bU\xf0\x85\xd2t+1\xff\x89\xc6\x8d\xb6\x00\x00\x00\x00\x8bE\x10\x83\xc7\x01\x89D$\x08\x8bE\x0c\x89D$\x04\x8bE\x08\x89\x04$\xff\x16\x83\xc6\x049}\xf0u\xdf\x83\xc4\x1c[^_]\xc3\x8b\x1c$\xc3\x90\x90\x90U\x89\xe5S\xbb\x8c\x95\x04\x08\x83\xec\x04\xa1\x8c\x95\x04\x08\x83\xf8\xfft\x0c\x83\xeb\x04\xff\xd0\x8b\x03\x83\xf8\xffu\xf4\x83\xc4\x04[]\xc3U\x89\xe5S\x83\xec\x04\xe8\x00\x00\x00\x00[\x81\xc3\x08\x11\x00\x00\xe8 \xfe\xff\xffY[\xc9\xc3\x03\x00\x00\x00\x01\x00\x02\x00\x00\x00\x00\x00PV\x00HVM\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00\x0c\x00\x00\x00\xb4\x82\x04\x08\r\x00\x00\x00X\x85\x04\x08\xf5\xfe\xffoH\x81\x04\x08\x05\x00\x00\x00\xe8\x81\x04\x08\x06\x00\x00\x00h\x81\x04\x08\n\x00\x00\x00a\x00\x00\x00\x0b\x00\x00\x00\x10\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00l\x96\x04\x08\x02\x00\x00\x000\x00\x00\x00\x14\x00\x00\x00\x11\x00\x00\x00\x17\x00\x00\x00\x84\x82\x04\x08\x11\x00\x00\x00|\x82\x04\x08\x12\x00\x00\x00\x08\x00\x00\x00\x13\x00\x00\x00\x08\x00\x00\x00\xfe\xff\xffo\\\x82\x04\x08\xff\xff\xffo\x01\x00\x00\x00\xf0\xff\xffoJ\x82\x04\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x95\x04\x08\x00\x00\x00\x00\x00\x00\x00\x00\xe2\x82\x04\x08\xf2\x82\x04\x08\x02\x83\x04\x08\x12\x83\x04\x08"\x83\x04\x082\x83\x04\x08\x00\x00\x00\x00\x00GCC: (GNU) 4.1.2 20080704 (Red Hat 4.1.2-46)\x00\x00GCC: (GNU) 4.1.2 20080704 (Red Hat 4.1.2-46)\x00\x00GCC: (GNU) 4.1.2 20080704 (Red Hat 4.1.2-48)\x00\x00GCC: (GNU) 4.1.2 20080704 (Red Hat 4.1.2-48)\x00\x00GCC: (GNU) 4.1.2 20080704 (Red Hat 4.1.2-48)\x00\x00GCC: (GNU) 4.1.2 20080704 (Red Hat 4.1.2-46)\x00\x00.symtab\x00.strtab\x00.shstrtab\x00.interp\x00.note.ABI-tag\x00.gnu.hash\x00.dynsym\x00.dynstr\x00.gnu.version\x00.gnu.version_r\x00.rel.dyn\x00.rel.plt\x00.init\x00.text\x00.fini\x00.rodata\x00.eh_frame\x00.ctors\x00.dtors\x00.jcr\x00.dynamic\x00.got\x00.got.plt\x00.data\x00.bss\x00.comment\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x14\x81\x04\x08\x14\x01\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00#\x00\x00\x00\x07\x00\x00\x00\x02\x00\x00\x00(\x81\x04\x08(\x01\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x001\x00\x00\x00\xf6\xff\xffo\x02\x00\x00\x00H\x81\x04\x08H\x01\x00\x00 \x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00;\x00\x00\x00\x0b\x00\x00\x00\x02\x00\x00\x00h\x81\x04\x08h\x01\x00\x00\x80\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x10\x00\x00\x00C\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\xe8\x81\x04\x08\xe8\x01\x00\x00a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00K\x00\x00\x00\xff\xff\xffo\x02\x00\x00\x00J\x82\x04\x08J\x02\x00\x00\x10\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00X\x00\x00\x00\xfe\xff\xffo\x02\x00\x00\x00\\\x82\x04\x08\\\x02\x00\x00 \x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00g\x00\x00\x00\t\x00\x00\x00\x02\x00\x00\x00|\x82\x04\x08|\x02\x00\x00\x08\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x08\x00\x00\x00p\x00\x00\x00\t\x00\x00\x00\x02\x00\x00\x00\x84\x82\x04\x08\x84\x02\x00\x000\x00\x00\x00\x04\x00\x00\x00\x0b\x00\x00\x00\x04\x00\x00\x00\x08\x00\x00\x00y\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\xb4\x82\x04\x08\xb4\x02\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00t\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\xcc\x82\x04\x08\xcc\x02\x00\x00p\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x7f\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00@\x83\x04\x08@\x03\x00\x00\x18\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x85\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00X\x85\x04\x08X\x05\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x8b\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00t\x85\x04\x08t\x05\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x93\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x88\x85\x04\x08\x88\x05\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x9d\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x8c\x95\x04\x08\x8c\x05\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\xa4\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x94\x95\x04\x08\x94\x05\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\xab\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x9c\x95\x04\x08\x9c\x05\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\xb0\x00\x00\x00\x06\x00\x00\x00\x03\x00\x00\x00\xa0\x95\x04\x08\xa0\x05\x00\x00\xc8\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x08\x00\x00\x00\xb9\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00h\x96\x04\x08h\x06\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\xbe\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00l\x96\x04\x08l\x06\x00\x00$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\xc7\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x90\x96\x04\x08\x90\x06\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\xcd\x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x00\xa0\x96\x04\x08\x94\x06\x00\x00\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\xd2\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x94\x06\x00\x00\x14\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa8\x07\x00\x00\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x0c\x00\x00\x90\x04\x00\x00\x1b\x00\x00\x000\x00\x00\x00\x04\x00\x00\x00\x10\x00\x00\x00\t\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00t\x11\x00\x00\xa4\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x81\x04\x08\x00\x00\x00\x00\x03\x00\x01\x00\x00\x00\x00\x00(\x81\x04\x08\x00\x00\x00\x00\x03\x00\x02\x00\x00\x00\x00\x00H\x81\x04\x08\x00\x00\x00\x00\x03\x00\x03\x00\x00\x00\x00\x00h\x81\x04\x08\x00\x00\x00\x00\x03\x00\x04\x00\x00\x00\x00\x00\xe8\x81\x04\x08\x00\x00\x00\x00\x03\x00\x05\x00\x00\x00\x00\x00J\x82\x04\x08\x00\x00\x00\x00\x03\x00\x06\x00\x00\x00\x00\x00\\\x82\x04\x08\x00\x00\x00\x00\x03\x00\x07\x00\x00\x00\x00\x00|\x82\x04\x08\x00\x00\x00\x00\x03\x00\x08\x00\x00\x00\x00\x00\x84\x82\x04\x08\x00\x00\x00\x00\x03\x00\t\x00\x00\x00\x00\x00\xb4\x82\x04\x08\x00\x00\x00\x00\x03\x00\n\x00\x00\x00\x00\x00\xcc\x82\x04\x08\x00\x00\x00\x00\x03\x00\x0b\x00\x00\x00\x00\x00@\x83\x04\x08\x00\x00\x00\x00\x03\x00\x0c\x00\x00\x00\x00\x00X\x85\x04\x08\x00\x00\x00\x00\x03\x00\r\x00\x00\x00\x00\x00t\x85\x04\x08\x00\x00\x00\x00\x03\x00\x0e\x00\x00\x00\x00\x00\x88\x85\x04\x08\x00\x00\x00\x00\x03\x00\x0f\x00\x00\x00\x00\x00\x8c\x95\x04\x08\x00\x00\x00\x00\x03\x00\x10\x00\x00\x00\x00\x00\x94\x95\x04\x08\x00\x00\x00\x00\x03\x00\x11\x00\x00\x00\x00\x00\x9c\x95\x04\x08\x00\x00\x00\x00\x03\x00\x12\x00\x00\x00\x00\x00\xa0\x95\x04\x08\x00\x00\x00\x00\x03\x00\x13\x00\x00\x00\x00\x00h\x96\x04\x08\x00\x00\x00\x00\x03\x00\x14\x00\x00\x00\x00\x00l\x96\x04\x08\x00\x00\x00\x00\x03\x00\x15\x00\x00\x00\x00\x00\x90\x96\x04\x08\x00\x00\x00\x00\x03\x00\x16\x00\x00\x00\x00\x00\xa0\x96\x04\x08\x00\x00\x00\x00\x03\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x18\x00\x01\x00\x00\x00d\x83\x04\x08\x00\x00\x00\x00\x02\x00\x0c\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\xf1\xff\x1c\x00\x00\x00\x8c\x95\x04\x08\x00\x00\x00\x00\x01\x00\x10\x00*\x00\x00\x00\x94\x95\x04\x08\x00\x00\x00\x00\x01\x00\x11\x008\x00\x00\x00\x9c\x95\x04\x08\x00\x00\x00\x00\x01\x00\x12\x00E\x00\x00\x00\xa0\x96\x04\x08\x04\x00\x00\x00\x01\x00\x17\x00S\x00\x00\x00\xa4\x96\x04\x08\x01\x00\x00\x00\x01\x00\x17\x00b\x00\x00\x00\x90\x83\x04\x08\x00\x00\x00\x00\x02\x00\x0c\x00x\x00\x00\x00\xf0\x83\x04\x08\x00\x00\x00\x00\x02\x00\x0c\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\xf1\xff\x84\x00\x00\x00\x90\x95\x04\x08\x00\x00\x00\x00\x01\x00\x10\x00\x91\x00\x00\x00\x88\x85\x04\x08\x00\x00\x00\x00\x01\x00\x0f\x00\x9f\x00\x00\x00\x9c\x95\x04\x08\x00\x00\x00\x00\x01\x00\x12\x00\xab\x00\x00\x000\x85\x04\x08\x00\x00\x00\x00\x02\x00\x0c\x00\xc1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\xf1\xff\xca\x00\x00\x00\x8c\x95\x04\x08\x00\x00\x00\x00\x00\x02\x10\x00\xe0\x00\x00\x00\x8c\x95\x04\x08\x00\x00\x00\x00\x00\x02\x10\x00\xf1\x00\x00\x00l\x96\x04\x08\x00\x00\x00\x00\x01\x02\x15\x00\x07\x01\x00\x00\x8c\x95\x04\x08\x00\x00\x00\x00\x00\x02\x10\x00\x1b\x01\x00\x00\x8c\x95\x04\x08\x00\x00\x00\x00\x00\x02\x10\x00.\x01\x00\x00\x8c\x95\x04\x08\x00\x00\x00\x00\x00\x02\x10\x00?\x01\x00\x00\x8c\x95\x04\x08\x00\x00\x00\x00\x00\x02\x10\x00R\x01\x00\x00\xa0\x95\x04\x08\x00\x00\x00\x00\x01\x02\x13\x00[\x01\x00\x00\x90\x96\x04\x08\x00\x00\x00\x00 \x00\x16\x00f\x01\x00\x00\xb0\x84\x04\x08\x05\x00\x00\x00\x12\x00\x0c\x00v\x01\x00\x00@\x83\x04\x08\x00\x00\x00\x00\x12\x00\x0c\x00}\x01\x00\x00\xc0\x96\x04\x08\x9c\x00\x00\x00\x11\x00\x17\x00\x80\x01\x00\x00\x00\x00\x00\x00\xd7\x00\x00\x00\x12\x00\x00\x00\x92\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xa1\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xb5\x01\x00\x00t\x85\x04\x08\x04\x00\x00\x00\x11\x00\x0e\x00\xbc\x01\x00\x00X\x85\x04\x08\x00\x00\x00\x00\x12\x00\r\x00\xc2\x01\x00\x00\x00\x00\x00\x00\x9f\x01\x00\x00\x12\x00\x00\x00\xdf\x01\x00\x00x\x85\x04\x08\x04\x00\x00\x00\x11\x00\x0e\x00\xee\x01\x00\x00\x90\x96\x04\x08\x00\x00\x00\x00\x10\x00\x16\x00\xfb\x01\x00\x00\x00\x00\x00\x000\x00\x00\x00\x12\x00\x00\x00\x0e\x02\x00\x00|\x85\x04\x08\x00\x00\x00\x00\x11\x02\x0e\x00\x1b\x02\x00\x00\x00\x00\x00\x00m\x00\x00\x00\x12\x00\x00\x00.\x02\x00\x00\x98\x95\x04\x08\x00\x00\x00\x00\x11\x02\x11\x00;\x02\x00\x00\xc0\x84\x04\x08i\x00\x00\x00\x12\x00\x0c\x00K\x02\x00\x00\x94\x96\x04\x08\x00\x00\x00\x00\x10\x00\xf1\xffW\x02\x00\x00\x14\x84\x04\x08\x1a\x00\x00\x00\x12\x00\x0c\x00f\x02\x00\x00\\\x97\x04\x08\x00\x00\x00\x00\x10\x00\xf1\xffk\x02\x00\x00\x00\x00\x00\x00\x8f\x01\x00\x00\x12\x00\x00\x00{\x02\x00\x00\x94\x96\x04\x08\x00\x00\x00\x00\x10\x00\xf1\xff\x82\x02\x00\x00)\x85\x04\x08\x00\x00\x00\x00\x12\x02\x0c\x00\x99\x02\x00\x00.\x84\x04\x08\x80\x00\x00\x00\x12\x00\x0c\x00\x9e\x02\x00\x00\xb4\x82\x04\x08\x00\x00\x00\x00\x12\x00\n\x00\x00call_gmon_start\x00crtstuff.c\x00__CTOR_LIST__\x00__DTOR_LIST__\x00__JCR_LIST__\x00dtor_idx.5793\x00completed.5791\x00__do_global_dtors_aux\x00frame_dummy\x00__CTOR_END__\x00__FRAME_END__\x00__JCR_END__\x00__do_global_ctors_aux\x00detect.c\x00__preinit_array_start\x00__fini_array_end\x00_GLOBAL_OFFSET_TABLE_\x00__preinit_array_end\x00__fini_array_start\x00__init_array_end\x00__init_array_start\x00_DYNAMIC\x00data_start\x00__libc_csu_fini\x00_start\x00jb\x00signal@@GLIBC_2.0\x00__gmon_start__\x00_Jv_RegisterClasses\x00_fp_hw\x00_fini\x00__libc_start_main@@GLIBC_2.0\x00_IO_stdin_used\x00__data_start\x00_setjmp@@GLIBC_2.0\x00__dso_handle\x00longjmp@@GLIBC_2.0\x00__DTOR_END__\x00__libc_csu_init\x00__bss_start\x00sigill_handler\x00_end\x00puts@@GLIBC_2.0\x00_edata\x00__i686.get_pc_thunk.bx\x00main\x00_init\x00'

if __name__ == "__main__":

    if not find_cpuid_dev():
        print "FAIL"
        sys.exit(1)

    failed_bits = []

    # hypervisor bit should be present in DomU
    if not cpuid_bit_test(0x00000001, R_ECX, 31):
        failed_bits.append('Hypervisor')

    # check DomU type : PV or HVM
    detect_bin = '/tmp/detect'
    open(detect_bin, "w").write(detect)
    os.chmod(detect_bin, \
        (S_IMODE(os.stat(detect_bin)[ST_MODE])) | S_IXUSR | S_IXGRP | S_IXOTH)
    p = subprocess.Popen(detect_bin, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    p.wait()
    (out, err, rc) = (p.stdout.read(1024), p.stderr.read(1024), p.returncode)
    dom_type = out.strip()

    # PV DomU cpu flags checking
    if dom_type == 'PV':

        # CPUID level 0x00000001 (EDX)

        # Virtual Mode Extensions, should be invisible
        if cpuid_bit_test(0x00000001, R_EDX, 1):
            failed_bits.append("VME")

        # Debugging Extension, should be invisible
        if cpuid_bit_test(0x00000001, R_EDX, 2):
            failed_bits.append("DE")

        # Page Size Extensions, should be invisible
        if cpuid_bit_test(0x00000001, R_EDX, 3):
            failed_bits.append("PSE")

        # Machine-Check Exception
        if cpuid_bit_test(0x00000001, R_EDX, 7):
            failed_bits.append("MCE")

        # Page Global Enable, should be invisible
        if cpuid_bit_test(0x00000001, R_EDX, 13):
            failed_bits.append("PGE")

        # Machine Check Architecture, should be invisible
        if cpuid_bit_test(0x00000001, R_EDX, 14):
            failed_bits.append("MCA")

        # 36-bit PSEs, should be invisible
        if cpuid_bit_test(0x00000001, R_EDX, 17):
            failed_bits.append("PSE36")

        # Debug store, should be invisible
        if cpuid_bit_test(0x00000001, R_EDX, 21):
            failed_bits.append("DS")

        # Automatic clock control, should be invisible
        if cpuid_bit_test(0x00000001, R_EDX, 29):
            failed_bits.append("ACC")

        # Pending Break Enable, should be invisible
        if cpuid_bit_test(0x00000001, R_EDX, 31):
            failed_bits.append("PBE")

        # CPUID level 0x00000001 (ECX)

        # 64-bit Debug Store, should be invisible
        if cpuid_bit_test(0x00000001, R_ECX, 2):
            failed_bits.append("DTES64")

        # Monitor/Mwait support, should be invisible
        if cpuid_bit_test(0x00000001, R_ECX, 3):
            failed_bits.append("MWAIT")

        # CPL Qualified Debug Store, should be invisible
        if cpuid_bit_test(0x00000001, R_ECX, 4):
            failed_bits.append("DSCPL")

        # Safer Mode Extensions, should be invisible
        if cpuid_bit_test(0x00000001, R_ECX, 6):
            failed_bits.append("SMXE")

        # Thermal Monitor 2, should be invisible
        if cpuid_bit_test(0x00000001, R_ECX, 8):
            failed_bits.append("TM2")

        # Send Task Priority Messages, should be invisible
        if cpuid_bit_test(0x00000001, R_ECX, 14):
            failed_bits.append("XTPR")

        # Perf/Debug Capability MSR, should be invisible
        if cpuid_bit_test(0x00000001, R_ECX, 15):
            failed_bits.append("PDCM")

        # Direct Cache Access, should be invisible
        if cpuid_bit_test(0x00000001, R_ECX, 18):
            failed_bits.append("DCA")

        # XSAVE/XRSTOR/XSETBV/XGETBV, should be invisible
        if cpuid_bit_test(0x00000001, R_ECX, 26):
            failed_bits.append("XSAVE")

        # CPUID level 0x80000001 (ECX)

        # OS Visible Workaround, should be invisible
        if cpuid_bit_test(0x80000001, R_ECX, 9):
            failed_bits.append("OSVW")

        # Instruction Based Sampling, should be invisible
        if cpuid_bit_test(0x80000001, R_ECX, 10):
            failed_bits.append("IBS")

        # SKINIT, STGI/CLGI, DEV, should be invisible
        if cpuid_bit_test(0x80000001, R_ECX, 12):
            failed_bits.append("SKINIT")

        # Watchdog Timer, should be invisible
        if cpuid_bit_test(0x80000001, R_ECX, 13):
            failed_bits.append("WDT")

        # CPUID level 0x80000001 (EDX)

        # 1Gb large page support, should be invisible
        if cpuid_bit_test(0x80000001, R_EDX, 26):
            failed_bits.append("PAGE1GB")

        # RDTSCP, should be invisible
        if cpuid_bit_test(0x80000001, R_EDX, 27):
            failed_bits.append("RDTSCP")

    # PV TEST END

    # HVM DomU cpu flags checking
    if dom_type == 'HVM':

        # Checking Intel specific cpu flags
        if get_cpu_vendor() == 'GenuineIntel':

            # CPUID level 0x00000001 (EBX)

            # CPUID level 0x00000001 (ECX)

            # Reserved bits for CPUID_L1, should be invisible
            if cpuid_bit_test(0x00000001, R_ECX, 6) or\
                    cpuid_bit_test(0x00000001, R_ECX, 18):
                failed_bits.append('VCPU_CPUID_L1_ECX_RESERVED')

            # Intel Virtual Machine Extensions, should be invisible
            if cpuid_bit_test(0x00000001, R_ECX, 5):
                failed_bits.append('VMXE')

            # Enhanced SpeedStep, should be invisible
            if cpuid_bit_test(0x00000001, R_ECX, 7):
                failed_bits.append('EST')

            # Thermal Monitor 2, should be invisible
            if cpuid_bit_test(0x00000001, R_ECX, 8):
                failed_bits.append('TM2')

            # Context ID, should be invisible
            if cpuid_bit_test(0x00000001, R_ECX, 10):
                failed_bits.append('CID')

            # XSAVE/XRSTOR/XSETBV/XGETBV, should be invisible
            if cpuid_bit_test(0x00000001, R_ECX, 26):
                failed_bits.append('XSAVE')

            # XSAVE enabled in the OS, should be invisible
            if cpuid_bit_test(0x00000001, R_ECX, 27):
                failed_bits.append('OSXSAVE')

            # CPUID level 0x00000001 (EDX)

            # ACPI via MSR, should be invisible
            if cpuid_bit_test(0x00000001, R_EDX, 22):
                failed_bits.append('ACPI')

            # Hyper-Threading, should be invisible
            if cpuid_bit_test(0x00000001, R_EDX, 28):
                failed_bits.append('HT')

            # Automatic clock control, should be invisible
            if cpuid_bit_test(0x00000001, R_EDX, 29):
                failed_bits.append('ACC')

            # CPUID level 0x00000004

            # eax &= NUM_CORES_RESET_MASK (0xFF00FFFF)
            for i in range(16, 23):
                if cpuid_bit_test(0x00000004, R_EAX, i):
                    failed_bits.append('NUM_THREADS_RESET_MASK')
                    break

        # Checking AMD specific cpu flags
        elif get_cpu_vendor() == "AuthenticAMD":

            # CPUID level 0x00000001 (EBX)

            # clear the logical processor count when HTT=0
            # ebx &= 0xFF00FFFF
            # ebx |= 0x00010000
            for i in range(17, 23):
                if cpuid_bit_test(0x00000001, R_EBX, i):
                    failed_bits.append('Logical Processor Count')
                    break
            if not cpuid_bit_test(0x00000001, R_EBX, 16):
                failed_bits.append('precaution')

            # CPUID level 0x00000001 (ECX)

            # Clear out reserved bits
            # ecx &= ~SVM_VCPU_CPUID_L1_ECX_RESERVED (0x7fffdff6)
            # 0111 1111 1111 1111 1101 1111 1111 0110
            for i in range(1, 3) + range(4, 13) + range(14,31):
                if cpuid_bit_test(0x00000001, R_ECX, i):
                    failed_bits.append('SVM_VCPU_CPUID_L1_ECX_RESERVED')
                    break

            # CPUID level 0x00000001 (EDX)

            # Clear out reserved bits

            # edx &= ~SVM_VCPU_CPUID_L1_EDX_RESERVED (0xe8740400)
            # 1110 1000 0111 0100 0000 0100 0000 0000
            for i in [10, 18, 20, 21, 22, 27, 29, 30, 31]:
                if cpuid_bit_test(0x00000001, R_EDX, i):
                    failed_bits.append('SVM_VCPU_CPUID_L1_EDX_RESERVED')
                    break

            # CPUID level 0x80000001 (EDX)

            # Cmp_Legacy, supposed to be zero when HTT = 0, should be invisible
            if cpuid_bit_test(0x80000001, R_ECX, 1):
                failed_bits.append("CMP_LEGACY")

            # AMD Secure Virtual Machine, should be invisible
            if cpuid_bit_test(0x80000001, R_ECX, 2):
                failed_bits.append("SVME")

            # NodeId MSR, should be invisible
            if cpuid_bit_test(0x80000001, R_ECX, 19):
                failed_bits.append("NODEID_MSR")

            # 36-bit Page Size Extension, should be invisible
            if cpuid_bit_test(0x80000001, R_EDX, 17):
                failed_bits.append("PSE-36")

            # FXSAVE and FXRSTOR, should be invisible
            if cpuid_bit_test(0x80000001, R_EDX, 25):
                failed_bits.append("3DNOW")

            # AMD 3DNow! extensions, should be invisible
            if cpuid_bit_test(0x80000001, R_EDX, 30):
                failed_bits.append("3DNOWEXT")

            # AMD 3DNow!, should be invisible
            if cpuid_bit_test(0x80000001, R_EDX, 31):
                failed_bits.append("3DNOW")

            # CPUID level 0x80000007
            # Mask out features of power management

            for i in range(0, 31):
                if cpuid_bit_test(0x80000007, R_EAX, i)\
                        or cpuid_bit_test(0x80000007, R_EBX, i)\
                        or cpuid_bit_test(0x80000007, R_ECX, i)\
                        or cpuid_bit_test(0x80000007, R_EDX, i):
                    failed_bits.append("Power Management")
                    break

            # CPUID level 0x80000008
            # Make sure Number of CPU core is 1 when HTT=0
            # ecx &= 0xFFFFFF00
            for i in range(0, 7):
                if cpuid_bit_test(0x80000008, R_ECX, i):
                    failed_bits.append("CPU core")
                    break

            # CPUID level 0x8000000A
            # Mask out features of SVM extension

            for i in range(0, 31):
                if cpuid_bit_test(0x8000000A, R_EAX, i)\
                        or cpuid_bit_test(0x8000000A, R_EBX, i)\
                        or cpuid_bit_test(0x8000000A, R_ECX, i)\
                        or cpuid_bit_test(0x8000000A, R_EDX, i):
                    failed_bits.append("SVM extension")
                    break
    # HVM TEST END

    if len(failed_bits) == 0:
        print "TEST cpuflags [PASS]"
    else:
        print "TEST cpuflags [FAIL]"
        print "Failed bits:"
        for i in failed_bits:
            print "%-50s: [FAIL]" % i
